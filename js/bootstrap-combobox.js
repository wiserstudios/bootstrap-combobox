// Generated by CoffeeScript 1.7.1

/*
=============================================================
bootstrap-combobox.js v1.1.6
=============================================================
Copyright 2012 Daniel Farrell
Copyright 2014 Wiserstudios, LLC

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=============================================================
 */

(function() {
  "use strict";
  var Combobox, Option, OptionGroup,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Option = (function() {
    function Option(value, text, selected) {
      this.value = value;
      this.text = text;
      this.selected = selected;
    }

    return Option;

  })();

  OptionGroup = (function() {
    function OptionGroup(label, options) {
      this.label = label;
      this.options = options;
    }

    return OptionGroup;

  })();

  Combobox = (function() {
    function Combobox(element, options) {
      this.options = $.extend({}, $.fn.combobox.defaults, options);
      this.$source = $(element);
      this.$container = this.setup();
      this.$element = this.$container.find('input[type=text]');
      this.$target = this.$container.find('input[type=hidden]');
      this.$button = this.$container.find('.dropdown-toggle');
      this.$menu = $(this.options.menu).appendTo('body');
      this.matcher = this.options.matcher || this.matcher;
      this.sorter = this.options.sorter || this.sorter;
      this.highlighter = this.options.highlighter || this.highlighter;
      this.shown = false;
      this.selected = false;
      this.refresh();
      this.transferAttributes();
      this.listen();
    }

    Combobox.prototype.setup = function() {
      var combobox;
      combobox = $(this.options.template);
      this.$source.before(combobox);
      this.$source.hide();
      return combobox;
    };

    Combobox.prototype.disable = function() {
      this.$element.prop('disabled', true);
      this.$button.attr('disabled', true);
      this.disabled = true;
      return this.$container.addClass('combobox-disabled');
    };

    Combobox.prototype.enable = function() {
      this.$element.prop('disabled', false);
      this.$button.attr('disabled', false);
      this.disabled = false;
      return this.$container.removeClass('combobox-disabled');
    };

    Combobox.prototype.parseOption = function(opt) {
      return new Option(opt.val(), opt.text(), opt.prop('selected') && opt.val() !== '');
    };

    Combobox.prototype.parseOptionGroup = function(group) {
      var child, options;
      options = (function() {
        var _i, _len, _ref, _results;
        _ref = group.children('option');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(this.parseOption($(child)));
        }
        return _results;
      }).call(this);
      return new OptionGroup(group.attr('label'), options);
    };

    Combobox.prototype.parse = function(element) {
      var child, _i, _len, _ref, _results;
      _ref = element.children('option,optgroup');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push($(child).is('option') ? this.parseOption($(child)) : this.parseOptionGroup($(child)));
      }
      return _results;
    };

    Combobox.prototype.transferAttributes = function() {
      this.options.placeholder = this.$source.attr('data-placeholder') || this.options.placeholder;
      this.$element.attr('placeholder', this.options.placeholder);
      this.$target.prop('name', this.$source.prop('name'));
      this.$target.val(this.$source.val());
      this.$source.removeAttr('name');
      this.$element.attr('required', this.$source.attr('required'));
      this.$element.attr('rel', this.$source.attr('rel'));
      this.$element.attr('title', this.$source.attr('title'));
      this.$element.attr('class', this.$source.attr('class'));
      this.$element.attr('tabindex', this.$source.attr('tabindex'));
      this.$source.removeAttr('tabindex');
      if (this.$source.attr('disabled') != null) {
        return this.disable();
      }
    };

    Combobox.prototype.traverseOptions = function(items, callback) {
      var item, option, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (item instanceof Option) {
          _results.push(callback(item));
        } else if (item instanceof OptionGroup) {
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = item.options;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              option = _ref[_j];
              _results1.push(callback(option));
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Combobox.prototype.setPlaceholder = function(items) {
      return this.traverseOptions(items, (function(_this) {
        return function(option) {
          if (option.value === '') {
            return _this.options.placeholder = option.text;
          }
        };
      })(this));
    };

    Combobox.prototype.select = function(arg) {
      switch (false) {
        case !(arg instanceof Option):
          this.$element.val(this.updater(arg.text)).trigger('change');
          this.$target.val(arg.value).trigger('change');
          this.$source.val(arg.value).trigger('change');
          this.$container.addClass('combobox-selected');
          this.selected = true;
          break;
        case !(arg instanceof Array):
          this.traverseOptions(arg, (function(_this) {
            return function(option) {
              if (option.selected) {
                return _this.select(option);
              }
            };
          })(this));
          break;
        case !(arg == null):
          this.select(this.$menu.find('.active').data('option'));
      }
      return this.hide();
    };

    Combobox.prototype.updater = function(item) {
      return item;
    };

    Combobox.prototype.show = function() {
      var pos;
      pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      });
      this.$menu.insertAfter(this.$element).css({
        top: pos.top + pos.height,
        left: pos.left
      }).show();
      this.shown = true;
      return this;
    };

    Combobox.prototype.hide = function() {
      this.$menu.hide();
      this.shown = false;
      return this;
    };

    Combobox.prototype.lookup = function(event) {
      this.query = this.$element.val();
      return this.process(this.items);
    };

    Combobox.prototype.process = function(items) {
      var group, groups, option, ungrouped, _i, _len;
      ungrouped = this.sorter((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          option = items[_i];
          if (option instanceof Option && this.matcher(option)) {
            _results.push(option);
          }
        }
        return _results;
      }).call(this));
      groups = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          group = items[_i];
          if (group instanceof OptionGroup) {
            _results.push(new OptionGroup(group.label, group.options));
          }
        }
        return _results;
      })();
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        group = groups[_i];
        group.options = this.sorter((function() {
          var _j, _len1, _ref, _results;
          _ref = group.options;
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            option = _ref[_j];
            if (this.matcher(option)) {
              _results.push(option);
            }
          }
          return _results;
        }).call(this));
      }
      groups = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
          group = groups[_j];
          if (group.options.length > 0) {
            _results.push(group);
          }
        }
        return _results;
      })();
      items = ungrouped.concat(groups);
      if (items.length === 0) {
        if (this.shown) {
          return this.hide;
        }
      } else {
        this.render(items);
        return this.show();
      }
    };

    Combobox.prototype.matcher = function(option) {
      return ~option.text.toLowerCase().indexOf(this.query.toLowerCase());
    };

    Combobox.prototype.sorter = function(options) {
      var beginswith, caseInsensitive, caseSensitive, option, _i, _len;
      beginswith = [];
      caseSensitive = [];
      caseInsensitive = [];
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        if (!option.text.toLowerCase().indexOf(this.query.toLowerCase())) {
          beginswith.push(option);
        } else if (~option.text.indexOf(this.query)) {
          caseSensitive.push(option);
        } else {
          caseInsensitive.push(option);
        }
      }
      return beginswith.concat(caseSensitive, caseInsensitive);
    };

    Combobox.prototype.highlighter = function(option) {
      var query;
      query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      return option.text.replace(new RegExp('(' + query + ')', 'ig'), function($1, match) {
        return '<strong>' + match + '</strong>';
      });
    };

    Combobox.prototype.renderOption = function(option) {
      var item;
      item = $(this.options.item);
      item.data('option', option);
      item.find('a').html(this.highlighter(option));
      return item;
    };

    Combobox.prototype.renderOptionGroup = function(group) {
      var header, option, options;
      header = $(this.options.item);
      header.addClass('dropdown-header');
      header.html(group.label);
      options = (function() {
        var _i, _len, _ref, _results;
        _ref = group.options;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          if (option.value !== '') {
            _results.push(this.renderOption(option));
          }
        }
        return _results;
      }).call(this);
      return [header].concat(options);
    };

    Combobox.prototype.render = function(items) {
      var divider, element, group, groups, option, ungrouped, _i, _len, _results;
      ungrouped = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          option = items[_i];
          if (option instanceof Option && option.value !== '') {
            _results.push(this.renderOption(option));
          }
        }
        return _results;
      }).call(this);
      groups = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          group = items[_i];
          if (group instanceof OptionGroup) {
            _results.push(this.renderOptionGroup(group));
          }
        }
        return _results;
      }).call(this);
      if (ungrouped.length > 0) {
        ungrouped[0].addClass('active');
      } else {
        groups[0][1].addClass('active');
      }
      divider = $(this.options.item);
      divider.addClass('divider');
      divider.html('');
      this.$menu.html('');
      this.$menu.append(ungrouped);
      _results = [];
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        group = groups[_i];
        if (this.$menu.children().length > 0) {
          this.$menu.append(divider);
        }
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {
            element = group[_j];
            _results1.push(this.$menu.append(element));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Combobox.prototype.next = function(event) {
      var active, next;
      active = this.$menu.find('.active').removeClass('active');
      next = active.next();
      if (!next.length) {
        next = $(this.$menu.find('li')[0]);
      }
      return next.addClass('active');
    };

    Combobox.prototype.prev = function(event) {
      var active, prev;
      active = this.$menu.find('.active').removeClass('active');
      prev = active.prev();
      if (!prev.length) {
        prev = this.$menu.find('li').last();
      }
      return prev.addClass('active');
    };

    Combobox.prototype.toggle = function() {
      if (!this.disabled) {
        if (this.$container.hasClass('combobox-selected')) {
          this.clearTarget();
          this.triggerChange();
          return this.clearElement();
        } else {
          if (this.shown) {
            return this.hide();
          } else {
            this.clearElement();
            return this.lookup();
          }
        }
      }
    };

    Combobox.prototype.clearElement = function() {
      return this.$element.val('').focus();
    };

    Combobox.prototype.clearTarget = function() {
      this.$source.val('');
      this.$target.val('');
      this.$container.removeClass('combobox-selected');
      return this.selected = false;
    };

    Combobox.prototype.triggerChange = function() {
      return this.$source.trigger('change');
    };

    Combobox.prototype.refresh = function() {
      this.items = this.parse(this.$source);
      this.setPlaceholder(this.items);
      return this.select(this.items);
    };

    Combobox.prototype.listen = function() {
      this.$element.on('focus', $.proxy(this.focus, this)).on('blur', $.proxy(this.blur, this)).on('keypress', $.proxy(this.keypress, this)).on('keyup', $.proxy(this.keyup, this));
      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this));
      }
      this.$menu.on('click', $.proxy(this.click, this)).on('mouseenter', 'li', $.proxy(this.mouseenter, this)).on('mouseleave', 'li', $.proxy(this.mouseleave, this));
      return this.$button.on('click', $.proxy(this.toggle, this));
    };

    Combobox.prototype.eventSupported = function(eventName) {
      var isSupported;
      isSupported = __indexOf.call(this.$element, eventName) >= 0;
      if (!isSupported) {
        this.$element.attr(eventName, 'return;');
        isSupported = typeof this.$element[eventName] === 'function';
      }
      return isSupported;
    };

    Combobox.prototype.move = function(e) {
      if (!this.shown) {
        return;
      }
      switch (e.keyCode) {
        case 27:
          e.preventDefault();
          break;
        case 38:
          e.preventDefault();
          this.prev();
          break;
        case 40:
          e.preventDefault();
          this.next();
      }
      return e.stopPropagation();
    };

    Combobox.prototype.keydown = function(e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      return this.move(e);
    };

    Combobox.prototype.keypress = function(e) {
      if (this.suppressKeyPressRepeat) {
        return;
      }
      return this.move(e);
    };

    Combobox.prototype.keyup = function(e) {
      switch (e.keyCode) {
        case 13:
          if (!this.shown) {
            return;
          }
          this.select();
          break;
        case 27:
          if (!this.shown) {
            return;
          }
          this.hide();
          break;
        default:
          this.clearTarget();
          this.lookup();
      }
      e.stopPropagation();
      return e.preventDefault();
    };

    Combobox.prototype.focus = function(e) {
      return this.focused = true;
    };

    Combobox.prototype.blur = function(e) {
      var val;
      this.focused = false;
      val = this.$element.val();
      if (!this.selected && val !== '') {
        this.$element.val('');
        this.$source.val('').trigger('change');
        this.$target.val('').trigger('change');
      }
      if (!this.mousedover && this.shown) {
        return setTimeout(((function(_this) {
          return function() {
            return _this.hide();
          };
        })(this)), 200);
      }
    };

    Combobox.prototype.click = function(e) {
      e.stopPropagation();
      e.preventDefault();
      this.select();
      return this.$element.focus();
    };

    Combobox.prototype.mouseenter = function(e) {
      this.mousedover = true;
      this.$menu.find('.active').removeClass('active');
      return $(e.currentTarget).addClass('active');
    };

    Combobox.prototype.mouseleave = function(e) {
      return this.mousedover = false;
    };

    return Combobox;

  })();

  $.fn.combobox = function(option) {
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      data = $this.data('combobox');
      options = typeof option === 'object' && option;
      if (!data) {
        $this.data('combobox', (data = new Combobox(this, options)));
      }
      if (typeof option === 'string') {
        return data[option]();
      }
    });
  };

  $.fn.combobox.defaults = {
    template: '<div class="combobox-container"> <input type="hidden" /> <div class="input-group"> <input type="text" autocomplete="off" /> <span class="input-group-addon dropdown-toggle" data-dropdown="dropdown"> <span class="caret" /> <span class="glyphicon glyphicon-remove" /> </span> </div> </div>',
    menu: '<ul class="typeahead typeahead-long dropdown-menu"></ul>',
    item: '<li><a href="#"></a></li>'
  };

  $.fn.combobox.Constructor = Combobox;

}).call(this);


//# sourceMappingURL=bootstrap-combobox.map
